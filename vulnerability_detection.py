
import re
from typing import Optional, List, Dict, Tuple
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.ensemble import RandomForestClassifier
from sklearn.multiclass import OneVsRestClassifier
from sklearn.preprocessing import MultiLabelBinarizer
import joblib

class VulnerabilityDetector:
    def __init__(self, use_ml: bool = True):
        self.use_ml = use_ml
        self.patterns = self._initialize_patterns()
        self.context_checks = self._initialize_context_checks()

        self.vectorizer = None
        self.ml_classifier = None
        self.mlb = None
        self.ml_features = None

        if use_ml:
            self._initialize_ml_components()

    def _initialize_patterns(self) -> List[Dict]:
        return [
            {
                'name': 'SQL инъекция',
                'patterns': [
                    (r'(select|insert|update|delete|from|where)\s+.*?[\'\"][^\'"]*?(\+|\|\||concat\()', re.IGNORECASE),
                    (r'(\$\{|\`|\$\().*?(select|insert|update|delete)', re.IGNORECASE),
                    (r'f[\'\"].*?\{.*?\}.*?[\'\"]', re.DOTALL)
                ],
                'context_keywords': ['username', 'password', 'user', 'login', 'credentials'],
                'ml_keywords': ['select', 'insert', 'update', 'delete', 'where', 'from', 'concat', 'union']
            },
            {
                'name': 'XSS',
                'patterns': [
                    (r'(innerhtml|innertext|outerhtml)\s*=\s*[^\'"]*?([\'\"])[^\'"]*?(script|alert|javascript:)',
                     re.IGNORECASE),
                    (r'document\.write\s*\(\s*[^\'"]*?([\'\"])[^\'"]*?(script|alert)', re.IGNORECASE),
                    (r'eval\s*\(\s*[^\'"]*?([\'\"])', re.IGNORECASE),
                    (r'<script[^>]*?>.*?</script>', re.IGNORECASE | re.DOTALL)
                ],
                'ml_keywords': ['innerhtml', 'document.write', 'eval', 'script', 'alert', 'javascript']
            },
            {
                'name': 'Инъекция команд',
                'patterns': [
                    (r'(system|exec|popen|subprocess\.call|runtime\.exec)\s*\(\s*[^\'"]*?([\'\"])[^\'"]*?[\$\%\&\|\;]',
                     re.IGNORECASE),
                    (r'Process\.Start\s*\(\s*[^\'"]*?([\'\"])', re.IGNORECASE)
                ],
                'ml_keywords': ['system', 'exec', 'popen', 'subprocess', 'runtime.exec', 'Process.Start']
            },
            {
                'name': 'Переполнение буфера',
                'patterns': [
                    (r'(strcpy|strcat|memcpy|gets|scanf)\s*\([^)]*\)', re.IGNORECASE),
                    (r'char\s+(\w+)\s*\[.*?\].*?\1\s*\[.*?\]\s*=', re.IGNORECASE)
                ],
                'ml_keywords': ['strcpy', 'strcat', 'memcpy', 'gets', 'scanf', 'buffer', 'char[']
            },
            {
                'name': 'Небезопасная десериализация',
                'patterns': [
                    (r'(pickle\.load|marshal\.load|yaml\.load)\s*\([^)]*\)', re.IGNORECASE),
                    (r'new\s+ObjectInputStream\s*\([^)]*\)', re.IGNORECASE),
                    (r'unserialize\s*\([^)]*\)', re.IGNORECASE)
                ],
                'exclude_patterns': [r'secure', r'valid', r'safe'],
                'ml_keywords': ['pickle.load', 'marshal.load', 'yaml.load', 'ObjectInputStream', 'unserialize']
            },
            {
                'name': 'Жестко заданные учетные данные',
                'patterns': [
                    (r'(password|passwd|token|api_key|secret|key|auth)\s*=\s*[\'\"][^\'\"]*[\'\"]', re.IGNORECASE),
                    (r'\"(?:[a-f0-9]{32,}|[a-f0-9]{40,}|[a-f0-9]{64,})\"', re.IGNORECASE)
                ],
                'weak_patterns': [r'123', r'test', r'admin', r'default', r'changeme', r'password'],
                'ml_keywords': ['password=', 'passwd=', 'token=', 'api_key=', 'secret=', 'key=', 'auth=']
            },
            {
                'name': 'Обход пути',
                'patterns': [
                    (r'\.\./[^/]*', re.IGNORECASE),
                    (r'\.\.\\[^\\]*', re.IGNORECASE),
                    (r'(/etc/passwd|c:\\windows\\|/proc/|\.\.%2f|\.\.%5c)', re.IGNORECASE)
                ],
                'ml_keywords': ['../', '..\\', '/etc/passwd', 'c:\\windows', '/proc/', '..%2f', '..%5c']
            },
            {
                'name': 'Состояние гонки',
                'patterns': [
                    (r'open\s*\([^)]*\).*?open\s*\([^)]*\)', re.IGNORECASE | re.DOTALL),
                    (r'access\s*\([^)]*\).*?open\s*\([^)]*\)', re.IGNORECASE | re.DOTALL),
                    (r'create\s*\([^)]*\)', re.IGNORECASE)
                ],
                'exclude_patterns': [r'lock', r'o_excl', r'exist'],
                'ml_keywords': ['open(', 'access(', 'create(', 'check-then-act', 'time-of-check']
            },
            {
                'name': 'Раскрытие информации',
                'patterns': [
                    (
                    r'(print|console\.log|system\.out\.println|printf|echo)\s*\([^)]*(password|secret|key|exception|error)[^)]*\)',
                    re.IGNORECASE)
                ],
                'ml_keywords': ['print(', 'console.log', 'system.out.println', 'printf', 'echo', 'exception', 'error']
            },
            {
                'name': 'Небезопасная генерация случайных чисел',
                'patterns': [
                    (r'(rand\s*\(|random\s*\(|math\.random)', re.IGNORECASE)
                ],
                'exclude_patterns': [r'crypto', r'secure', r'randombytes', r'securerandom'],
                'ml_keywords': ['rand(', 'random(', 'math.random', 'random_number(']
            }
        ]

    def _initialize_context_checks(self) -> Dict:
        return {
            'sql_keywords': ['select', 'insert', 'update', 'delete', 'from', 'where'],
            'sensitive_data': ['password', 'secret', 'key', 'token', 'auth'],
            'dangerous_functions': ['eval', 'system', 'exec', 'popen']
        }

    def _initialize_ml_components(self):
        self.vectorizer = TfidfVectorizer(
            max_features=1000,
            ngram_range=(1, 2),
            stop_words=None,
            lowercase=True
        )

        self.ml_classifier = OneVsRestClassifier(
            RandomForestClassifier(
                n_estimators=100,
                random_state=42,
                n_jobs=-1
            )
        )

        self.mlb = MultiLabelBinarizer()

        self.ml_features = []
        for vuln in self.patterns:
            if 'ml_keywords' in vuln:
                self.ml_features.extend(vuln['ml_keywords'])
        self.ml_features = list(set(self.ml_features))

    def _extract_ml_features(self, code_snippet: str) -> List[str]:
        features = []
        code_lower = code_snippet.lower()

        for keyword in self.ml_features:
            if keyword in code_lower:
                features.append(keyword)

        lines = code_snippet.split('\n')
        features.append(f'num_lines_{len(lines)}')
        features.append(f'code_length_{len(code_snippet)}')

        dangerous_patterns = ['eval', 'system', 'exec', 'pickle.load', 'strcpy']
        for pattern in dangerous_patterns:
            if pattern in code_lower:
                features.append(f'has_{pattern}')

        return features

    def train_ml_model(self, training_data: List[Tuple[str, List[str]]]):
        if not self.use_ml:
            print("ML отключен в настройках")
            return

        print("Обучение ML модели для классификации уязвимостей...")

        texts = [item[0] for item in training_data]
        labels = [item[1] for item in training_data]

        features_list = [self._extract_ml_features(text) for text in texts]

        X = self.vectorizer.fit_transform([' '.join(features) for features in features_list])

        y = self.mlb.fit_transform(labels)

        self.ml_classifier.fit(X, y)

        print(f"Модель обучена на {len(training_data)} примерах")
        print(f"Количество классов: {len(self.mlb.classes_)}")

    def _ml_predict(self, code_snippet: str) -> List[str]:
        if not self.use_ml or self.ml_classifier is None:
            return []

        try:
            features = self._extract_ml_features(code_snippet)
            X = self.vectorizer.transform([' '.join(features)])
            predictions = self.ml_classifier.predict(X)

            predicted_labels = self.mlb.inverse_transform(predictions)
            if len(predicted_labels) > 0:
                return list(predicted_labels[0])
        except Exception as e:
            print(f"Ошибка ML предсказания: {e}")

        return []

    def _check_context(self, code_lower: str, vulnerability: Dict) -> bool:
        if 'context_keywords' in vulnerability:
            if not any(keyword in code_lower for keyword in vulnerability['context_keywords']):
                return False

        if 'exclude_patterns' in vulnerability:
            if any(re.search(pattern, code_lower) for pattern in vulnerability['exclude_patterns']):
                return False

        if 'weak_patterns' in vulnerability:
            if not any(re.search(pattern, code_lower) for pattern in vulnerability['weak_patterns']):
                return False

        return True

    def _analyze_code_structure(self, code_lower: str) -> Dict:
        analysis = {
            'has_string_concatenation': bool(re.search(r'[\'\"][^\'\"]*?[\+\&\|][^\'\"]*?[\'\"]', code_lower)),
            'has_user_input': bool(re.search(r'(request|input|getparameter|query)', code_lower)),
            'has_database_operations': bool(re.search(r'(executequery|executewrite|connection)', code_lower)),
            'has_file_operations': bool(re.search(r'(open|read|write|create).*file', code_lower))
        }
        return analysis

    def detect_vulnerability_type(self, code_snippet: str) -> Optional[str]:
        if not code_snippet or not isinstance(code_snippet, str):
            return None

        cleaned_code = code_snippet.strip()

        if not cleaned_code:
            return None

        code_lower = cleaned_code.lower()

        ml_predictions = self._ml_predict(cleaned_code)
        if ml_predictions:
            return ml_predictions[0]

        code_analysis = self._analyze_code_structure(code_lower)

        for vulnerability in self.patterns:
            for pattern, flags in vulnerability['patterns']:
                if re.search(pattern, code_lower, flags):
                    if self._check_context(code_lower, vulnerability):
                        return vulnerability['name']

        return None

    def detect_multiple_vulnerabilities(self, code_snippet: str) -> List[str]:
        vulnerabilities = []

        cleaned_code = code_snippet.strip()

        if not cleaned_code:
            return vulnerabilities

        code_lower = cleaned_code.lower()

        if self.use_ml:
            ml_predictions = self._ml_predict(cleaned_code)
            vulnerabilities.extend(ml_predictions)

        for vulnerability in self.patterns:
            for pattern, flags in vulnerability['patterns']:
                if re.search(pattern, code_lower, flags):
                    if self._check_context(code_lower, vulnerability):
                        if vulnerability['name'] not in vulnerabilities:
                            vulnerabilities.append(vulnerability['name'])
                        break

        return vulnerabilities

    def save_model(self, filepath: str):
        if self.use_ml:
            joblib.dump({
                'vectorizer': self.vectorizer,
                'classifier': self.ml_classifier,
                'mlb': self.mlb,
                'features': self.ml_features
            }, filepath)
            print(f"ML модель сохранена в {filepath}")

    def load_model(self, filepath: str):
        if self.use_ml:
            try:
                model_data = joblib.load(filepath)
                self.vectorizer = model_data['vectorizer']
                self.ml_classifier = model_data['classifier']
                self.mlb = model_data['mlb']
                self.ml_features = model_data['features']
                print(f"ML модель загружена из {filepath}")
            except Exception as e:
                print(f"Ошибка загрузки модели: {e}")


def generate_training_data() -> List[Tuple[str, List[str]]]:
    training_examples = []


    sql_examples = [

        "query = \"SELECT * FROM users WHERE username = '\" + username + \"'\"",
        "String sql = \"INSERT INTO users VALUES ('\" + name + \"', '\" + password + \"')\"",
        "cursor.execute(\"DELETE FROM products WHERE id = \" + product_id)",
        "db.query(\"UPDATE accounts SET balance = \" + amount + \" WHERE id = \" + account_id)",
        "statement.execute(\"SELECT email FROM customers WHERE name = '\" + inputName + \"'\")",

        "String query = \"SELECT * FROM logs WHERE date > '\" + startDate + \"' AND date < '\" + endDate + \"'\"",
        "PreparedStatement stmt = conn.prepareStatement(\"DROP TABLE \" + tableName)",
        "entityManager.createQuery(\"FROM User u WHERE u.role = '\" + role + \"'\")",
        "sql = \"MERGE INTO data USING (SELECT '\" + value + \"' as col) src ON ...\"",
        "db.raw(\"EXEC sp_GetUserData '\" + userId + \"'\")",


        "final String sql = \"SELECT COUNT(*) FROM \" + table + \" WHERE status = '\" + status + \"'\"",
        "String searchQuery = \"SELECT * FROM articles WHERE title LIKE '%\" + searchTerm + \"%'\"",
        "queryBuilder.append(\" AND category = '\").append(category).append(\"'\")",
        "String filter = \" WHERE price > \" + minPrice + \" AND price < \" + maxPrice",
        "sqlCommand = \"GRANT SELECT ON \" + table + \" TO \" + userName",

        "f\"SELECT * FROM users WHERE id = {user_id}\"",
        "f\"INSERT INTO logs (message) VALUES ({message})\"",
        "`SELECT * FROM products WHERE category = ${category}`",
        "query = `UPDATE settings SET value = ${value} WHERE key = '${key}'`",
        "db.execute(`DELETE FROM ${table} WHERE id IN (${ids.join(',')})`)"
    ]
    for example in sql_examples:
        training_examples.append((example, ['SQL инъекция']))

    xss_examples = [

        "document.innerHTML = '<script>alert(\"XSS\")</script>'",
        "element.innerHTML = userContent",
        "document.write('<div>' + untrustedData + '</div>')",
        "element.outerHTML = '<a href=\"' + userLink + '\">Click</a>'",


        "img.setAttribute('onerror', 'alert(\"XSS\")')",
        "div.innerHTML = '<img src=\"x\" onerror=\"' + maliciousCode + '\">'",
        "link.href = 'javascript:alert(\"XSS\")'",


        "$('#content').html(userInput)",
        "element.append('<script>' + dynamicScript + '</script>')",
        "ReactDOM.render(<div>{dangerousHTML}</div>, container)",
        "vueApp.$el.innerHTML = unescapedContent",

        "window.location.href = userProvidedURL",
        "document.location = 'javascript:void(0)'",
        "iframe.src = untrustedSource"
    ]
    for example in xss_examples:
        training_examples.append((example, ['XSS']))

    command_examples = [

        "os.system('rm -rf ' + user_input)",
        "Runtime.getRuntime().exec(\"ping \" + hostname)",
        "subprocess.call(['ls', '-la', user_directory])",
        "Process.Start(\"cmd.exe\", \"/c \" + userCommand)",

        "Runtime.getRuntime().exec(new String[]{\"sh\", \"-c\", userScript})",
        "os.system('grep ' + pattern + ' ' + filename)",
        "subprocess.Popen(user_input, shell=True)",
        "exec('rm ' + filePath)",

        "Process.Start(\"nslookup\", domainName)",
        "Runtime.getRuntime().exec(\"curl \" + url)",
        "os.system('wget ' + downloadUrl)",
        "subprocess.run(['nc', '-l', '-p', port])",


        "String command = \"echo \" + data + \" | base64\"",
        "Runtime.getRuntime().exec(\"cat /etc/passwd | grep \" + username)",
        "os.system('find . -name \"*' + pattern + '*\" -delete')"
    ]
    for example in command_examples:
        training_examples.append((example, ['Инъекция команд']))

    credential_examples = [
        "password = \"secret123\"",
        "db_password = \"P@ssw0rd!\"",
        "final String PASSWORD = \"admin123\"",
        "const apiSecret = \"sk_live_1234567890abcdef\"",


        "api_key = \"AKIAIOSFODNN7EXAMPLE\"",
        "private_key = \"-----BEGIN PRIVATE KEY-----\\nMII...\"",
        "oauth_token = \"ya29.AHES6ZR...\"",
        "jwt_secret = \"mySuperSecretKey123\"",

        "token = \"xoxb-12345678901-1234567890123-abc123def456\"",
        "access_token = \"EAAa...\"",
        "bot_token = \"123456:ABC-DEF1234ghIkl-zyx57W2v1u123ew11\"",
        "slack_token = \"xoxp-12345678901-1234567890123-abc123def456\"",

        "database_url = \"postgresql://user:pass@localhost/db\"",
        "redis_url = \"redis://:password@localhost:6379\"",
        "smtp_password = \"emailPassword123\""
    ]
    for example in credential_examples:
        training_examples.append((example, ['Жестко заданные учетные данные']))

    deserialization_examples = [
        "pickle.loads(user_data)",
        "yaml.load(user_input)",
        "new ObjectInputStream(inputStream)",
        "BinaryFormatter().Deserialize(stream)",
        "Marshal.Load(data)",
        "jsonpickle.decode(untrusted_json)",
        "MessagePack.Unpack<object>(data)",
        "protobuf.ParseFromString(user_input)",
        "avro.deserialize(schema, data)",
        "thrift_deserialize(untrusted_data)"
    ]
    for example in deserialization_examples:
        training_examples.append((example, ['Небезопасная десериализация']))

    buffer_examples = [
        "strcpy(buffer, user_input)",
        "strcat(dest, src)",
        "memcpy(target, source, strlen(source))",
        "gets(input_buffer)",
        "scanf(\"%s\", buffer)",
        "read(fd, buffer, 1024)",
        "sprintf(buffer, \"Result: %s\", user_data)",
        "vsprintf(buffer, format, args)",
        "char array[10]; array[15] = 'x'",
        "int buffer[5]; buffer[10] = 1"
    ]
    for example in buffer_examples:
        training_examples.append((example, ['Переполнение буфера']))

    path_examples = [
        "File.open(\"../\" + filename)",
        "new FileInputStream(\"../../etc/passwd\")",
        "Files.readAllBytes(Paths.get(\"..\\\\windows\\\\system32\"))",
        "open(\"/proc/\" + pid + \"/mem\")",
        "include($_GET['page'] . '.php')",
        "require_once($module . '.inc')",
        "file_get_contents(\"../../../\" . $user_file)",
        "fopen(\"C:\\\\Windows\\\\\" + system_file, \"r\")",
        "new File(\"/var/www/\" + user_path)",
        "readfile(\"uploads/\" . $_POST['file'])"
    ]
    for example in path_examples:
        training_examples.append((example, ['Обход пути']))

    race_examples = [
        "if (!file.exists()) { file.createNewFile() }",
        "if (access(filepath, F_OK) == 0) { open(filepath, O_WRONLY) }",
        "if (!File.Exists(path)) { File.WriteAllText(path, data) }",
        "if (!db.userExists(username)) { db.createUser(username) }",
        "if (cache.get(key) == null) { cache.set(key, computeValue()) }",
        "if (!lock.isLocked()) { lock.lock(); performAction(); }",
        "if (counter < max) { counter++; process() }",
        "if (balance >= amount) { balance -= amount; save() }"
    ]
    for example in race_examples:
        training_examples.append((example, ['Состояние гонки']))

    info_examples = [
        "print(\"Error: Password is \" + password)",
        "console.log(\"Database error: \" + sqlQuery)",
        "System.out.println(\"Stack trace: \" + exception.toString())",
        "echo \"DEBUG: User token = \" . $token",
        "logger.error(\"API key: \" + apiKey)",
        "Response.Write(\"SQL: \" + commandText)",
        "Debug.WriteLine(\"Secret: \" + secretValue)",
        "print(f\"Configuration: {config}\")"
    ]
    for example in info_examples:
        training_examples.append((example, ['Раскрытие информации']))


    random_examples = [
        "Random random = new Random()",
        "Math.random()",
        "rand() % 100",
        "random.randint(1, 10)",
        "new Random().Next()",
        "SecureRandom.getInstanceStrong()",
        "ThreadLocalRandom.current().nextInt()"
    ]
    for example in random_examples:
        training_examples.append((example, ['Небезопасная генерация случайных чисел']))

    print(f"Сгенерировано {len(training_examples)} тренировочных примеров")
    return training_examples


def detect_vulnerability_type(code_snippet: str) -> Optional[str]:
    detector = VulnerabilityDetector(use_ml=False)
    return detector.detect_vulnerability_type(code_snippet)


def analyze_vulnerabilities(vulnerable_df, use_ml: bool = False):
    detector = VulnerabilityDetector(use_ml=use_ml)

    if use_ml:
        try:
            training_data = generate_training_data()
            detector.train_ml_model(training_data)
        except Exception as e:
            print(f"Ошибка обучения ML модели: {e}")
            print("Продолжаем с rule-based подходом...")

    vulnerable_df['vuln_type'] = vulnerable_df['code'].apply(detector.detect_vulnerability_type)

    all_vulnerabilities = vulnerable_df['vuln_type'].value_counts()
    top_vulnerabilities = all_vulnerabilities[all_vulnerabilities.index.notnull()].head(10)

    print(f"\n2. ТОП-10 САМЫХ РАСПРОСТРАНЕННЫХ УЯЗВИМОСТЕЙ:")
    for i, (vuln_type, count) in enumerate(top_vulnerabilities.items(), 1):
        percentage = (count / len(vulnerable_df)) * 100
        print(f"   {i:>2}. {vuln_type:<35}: {count:>4} случаев ({percentage:>5.1f}%)")


    print(f"\n3. РАСПРЕДЕЛЕНИЕ ТОП-10 УЯЗВИМОСТЕЙ ПО ЯЗЫКАМ:")
    print("-" * 70)

    for vuln_type in top_vulnerabilities.index:
        vuln_subset = vulnerable_df[vulnerable_df['vuln_type'] == vuln_type]
        lang_distribution = vuln_subset['language'].value_counts()

        print(f"\n{vuln_type}:")
        total_cases = len(vuln_subset)
        for lang, count in lang_distribution.items():
            percentage = (count / total_cases) * 100 if total_cases > 0 else 0
            print(f"   {lang.upper():<12}: {count:>3} случаев ({percentage:>5.1f}%)")

        if total_cases > 0:
            print(f"   {'TOTAL':<12}: {total_cases:>3} случаев")

    return vulnerable_df, top_vulnerabilities


def predict_vulnerability(model, tokenizer, code_snippet, max_sequence_length):
    from tensorflow.keras.preprocessing.sequence import pad_sequences

    sequence = tokenizer.texts_to_sequences([code_snippet])
    padded_sequence = pad_sequences(sequence, maxlen=max_sequence_length,
                                    padding='post', truncating='post')

    prediction = model.predict(padded_sequence, verbose=0)[0][0]
    probability = prediction * 100
    status = "УЯЗВИМЫЙ" if prediction > 0.5 else "БЕЗОПАСНЫЙ"

    print(f"Вероятность уязвимости: {probability:.2f}%")
    print(f"Статус: {status}")
    print(f"Сырое значение: {prediction:.4f}")

    return prediction